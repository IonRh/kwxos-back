name: Update Nezha Agent Releases

on:
  schedule:
    - cron: '0 0 1 * *' # Runs at 00:00 on the 1st of every month
  workflow_dispatch: # Allows manual triggering

jobs:
  update-nezha-agent:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest Nezha agent version
        id: get-version
        run: |
          # Fetch the latest release tag from nezhahq/agent
          LATEST_TAG=$(curl -s https://api.github.com/repos/nezhahq/agent/releases/latest | jq -r '.tag_name')
          echo "Latest Nezha agent version: $LATEST_TAG"
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Download and process amd64 version
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          URL="https://github.com/nezhahq/agent/releases/download/$VERSION/nezha-agent_linux_amd64.zip"
          curl -L -o nezha-agent_amd64.zip "$URL"
          unzip -o nezha-agent_amd64.zip
          mv nezha-agent npm_amd64
          rm nezha-agent_amd64.zip

      - name: Download and process arm64 version
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          URL="https://github.com/nezhahq/agent/releases/download/$VERSION/nezha-agent_linux_arm64.zip"
          curl -L -o nezha-agent_arm64.zip "$URL"
          unzip -o nezha-agent_arm64.zip
          mv nezha-agent npm_arm64
          rm nezha-agent_arm64.zip

      - name: Download and process s390x version
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          URL="https://github.com/nezhahq/agent/releases/download/$VERSION/nezha-agent_linux_s390x.zip"
          curl -L -o nezha-agent_s390x.zip "$URL"
          unzip -o nezha-agent_s390x.zip
          mv nezha-agent npm_s390x
          rm nezha-agent_s390x.zip

      - name: Delete existing new_zhav1 release if it exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release with tag new_zhav1 exists
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/new_zhav1 | jq -r '.id // empty')
          
          if [ ! -z "$RELEASE_ID" ]; then
            # Delete the existing release
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
            # Delete the tag
            git push origin --delete new_zhav1 || true
          fi

      - name: Create new release with new_zhav1 tag
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create new release
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{"tag_name": "new_zhav1", "name": "Nezha Agent v${{ steps.get-version.outputs.version }}", "body": "Auto-updated Nezha Agent binaries"}'
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/new_zhav1 | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      - name: Upload amd64 asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @npm_amd64 \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create-release.outputs.release_id }}/assets?name=npm_amd64"

      - name: Upload arm64 asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @npm_arm64 \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create-release.outputs.release_id }}/assets?name=npm_arm64"

      - name: Upload s390x asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @npm_s390x \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create-release.outputs.release_id }}/assets?name=npm_s390x"
